{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>OOPS</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "#name,id,emai,ph_no,total_fees,due_fees,course,\n",
    "\n",
    "names = []\n",
    "\n",
    "class Student: \n",
    "    \"\"\"Student Class to take care database of student\"\"\"\n",
    "    total_student = 0\n",
    "    id = 1000\n",
    "    def __init__(self,name,email,ph_no,course,fees,current):\n",
    "        global names\n",
    "        self.id = Student.id + 1\n",
    "        Student.id = Student.id + 1\n",
    "        self.name = name\n",
    "        self.email  = email\n",
    "        self.ph_no = ph_no\n",
    "        self.course = course\n",
    "        self.fees = fees\n",
    "        self.due = fees-current\n",
    "        Student.total_student+= 1\n",
    "        names.append(name)\n",
    "    def info(self):\n",
    "        print(\"Name : \",self.name)\n",
    "        print(\"Email : \",self.email)\n",
    "        print(\"Phone Number : \",self.ph_no)\n",
    "        print(\"Course : \",self.course)\n",
    "        print(\"Fees : \",self.fees)\n",
    "        print(\"Due : \",self.due)\n",
    "    def __str__(self):\n",
    "        return self.name\n",
    "    \n",
    "    def update_name(self,new_name):\n",
    "        self.name = new_name\n",
    "        print(\"Updated name sucessfully\")\n",
    "    def update_email(self,new_email):\n",
    "        self.email = new_email\n",
    "        print(\"Updated email sucessfully\")\n",
    "    def update_number(self,new_num):\n",
    "        self.ph_no = new_num\n",
    "        print(\"Updated name sucessfully\")\n",
    "    def __del__(self):\n",
    "        Student.total_student -= 1\n",
    "        del self\n",
    "    def __repr__(self):\n",
    "        return self.name\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('student.csv')\n",
    "data = f.read()\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.split('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = [ item.split(',') for item in data ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "for item in data : \n",
    "    item[-2:] = map(float,item[-2:])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['sachin', 'sachin@gmail.com', '9782131159', 'python', 15000.0, 10000.0],\n",
       " ['kushal', 'kushal@gmail.com', '9877974789', 'linux', 13000.0, 7500.0],\n",
       " ['rajat', 'sachin@gmail.com', '9782131159', 'python', 15000.0, 10000.0],\n",
       " ['gaurav', 'kushal@gmail.com', '9877974789', 'linux', 13000.0, 7500.0],\n",
       " ['nidhi', 'sachin@gmail.com', '9782131159', 'python', 15000.0, 10000.0],\n",
       " ['sanjana', 'kushal@gmail.com', '9877974789', 'linux', 13000.0, 7500.0]]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "st = [ ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "for item in data : \n",
    "    st.append(Student(*item))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[sachin, kushal, rajat, gaurav, nidhi, sanjana]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name :  gaurav\n",
      "Email :  kushal@gmail.com\n",
      "Phone Number :  9877974789\n",
      "Course :  linux\n",
      "Fees :  13000.0\n",
      "Due :  5500.0\n"
     ]
    }
   ],
   "source": [
    "st[-3].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[sachin, kushal, rajat, gaurav, nidhi, sanjana]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['sachin', 'kushal', 'rajat', 'gaurav', 'nidhi', 'sanjana']"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name :  rajat\n",
      "Email :  sachin@gmail.com\n",
      "Phone Number :  9782131159\n",
      "Course :  python\n",
      "Fees :  15000.0\n",
      "Due :  5000.0\n"
     ]
    }
   ],
   "source": [
    "if 'rajat' in names :\n",
    "    st[names.index('rajat')].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#inheritance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Inheritance</h1>\n",
    "<ul>\n",
    "    <li>Single Level</li>\n",
    "    <li>Multi-level</li>\n",
    "    <li>Heararchical </li>\n",
    "    <li>Multiple</li>\n",
    "    <li>Hybrid</li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Parent : \n",
    "    \"\"\"This is Parent\"\"\"\n",
    "    def __init__(self,name):\n",
    "        self.name = name\n",
    "    def show(self):\n",
    "        print(\"My name in Parent Class is \",self.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Child(Parent):\n",
    "    def __init__(self,name,color) : \n",
    "        #Parent.__init__(self,name)\n",
    "        super().__init__(name)\n",
    "        self.color= color\n",
    "    def display(self):\n",
    "        print(\"Hi my name is \",self.name)\n",
    "        print(\"my color is \",self.color)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi my name is  hari\n",
      "my color is  brown\n",
      "My name in Parent Class is  hari\n"
     ]
    }
   ],
   "source": [
    "c1 = Child('hari','brown')\n",
    "c1.display()\n",
    "c1.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My name in Parent Class is  Hello\n"
     ]
    }
   ],
   "source": [
    "p1 = Parent('Hello')\n",
    "p1.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "class mylist(list): \n",
    "    def __init__(self,*args):\n",
    "        self.args = args"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = mylist(1,2,3,4,5,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3, 4, 5, 6)"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.args"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.append(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3, 4, 5, 6)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.args"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "class mylist(list): \n",
    "    def __init__(self,*args):\n",
    "        super().__init__(args)\n",
    "    def squre(self):\n",
    "        return mylist(*[ var**2 for var in self ])\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = mylist(1,2,3,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.extend([5,6,7,8])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 7, 8]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 9, 16, 25, 36, 49, 64]\n"
     ]
    }
   ],
   "source": [
    "y = x.squre()\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 16, 81, 256, 625, 1296, 2401, 4096]"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.squre()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Dada : \n",
    "    def __init__(self,name):\n",
    "        self.name = name \n",
    "    def show_name(self):\n",
    "        print(\"Name Given by Grand Parent Class\",self.name)\n",
    "        \n",
    "class Parent(Dada):\n",
    "    def __init__(self,name):\n",
    "        super().__init__(name)\n",
    "        \n",
    "class Child(Parent): \n",
    "    def __init__(self,name):\n",
    "        super().__init__(name)\n",
    "    def dsp(self):\n",
    "        print(\"my name is lakhan\")\n",
    "    def show_name(self): #override parent show function\n",
    "        print(\"ha ha ha \")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = Child('hello')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ha ha ha \n"
     ]
    }
   ],
   "source": [
    "c.show_name()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "my name is lakhan\n"
     ]
    }
   ],
   "source": [
    "c.dsp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "class G : \n",
    "    def __init__(self):\n",
    "        self.bike = 'splendra'\n",
    "    def show_bike(self):\n",
    "        print(\"Bike = \",self.bike)\n",
    "class P(G) : \n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "\n",
    "class C(P) : \n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "c1 = C()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'splendra'"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c1.bike"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "c1.bike='apache'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'apache'"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c1.bike"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bike =  apache\n"
     ]
    }
   ],
   "source": [
    "c1.show_bike()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Heirarchical\n",
    "class P :\n",
    "    def __init__(self,name):\n",
    "        self.name = name\n",
    "    def show(self): \n",
    "        print(\"hi i am parent\",self.name)\n",
    "    def hi(self):\n",
    "        print(\"Helllo worl i am hi \")\n",
    "class C1(P) :\n",
    "    def __init__(self,name):\n",
    "        super().__init__(name)\n",
    "    \n",
    "class C2(P) : \n",
    "    def __init__(self,name):\n",
    "        super().__init__(name)\n",
    "    def show(self):\n",
    "        print(\"ha ha ha\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "c1 = C1('sachin')\n",
    "c2 = C2('grras')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hi i am parent sachin\n"
     ]
    }
   ],
   "source": [
    "c1.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ha ha ha\n"
     ]
    }
   ],
   "source": [
    "c2.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Helllo worl i am hi \n"
     ]
    }
   ],
   "source": [
    "c1.hi()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Helllo worl i am hi \n"
     ]
    }
   ],
   "source": [
    "c2.hi()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ha ha \n",
      "sachin\n"
     ]
    }
   ],
   "source": [
    "# MRO --> Method Resolution Order\n",
    "# left to right bottem up \n",
    "#multiple inheritance\n",
    "class P1 : \n",
    "    def __init__(self,name):\n",
    "        self.name = name\n",
    "    def show(self):\n",
    "        print(self.name)\n",
    "class P2 : \n",
    "    def __init__(self,name):\n",
    "        self.name = name.upper()\n",
    "    def get(self):\n",
    "        print(self.name.lower())\n",
    "    def show(self):\n",
    "        print('ha ha ')\n",
    "        \n",
    "class c(P2,P1): \n",
    "    def __init__(self,name):\n",
    "        super().__init__(name)\n",
    "c1 = c('sachin')\n",
    "c1.show()\n",
    "c1.get()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is C\n"
     ]
    }
   ],
   "source": [
    "class A : \n",
    "    def show(self):\n",
    "        print(\"This is A\")\n",
    "class B(A) :\n",
    "    pass\n",
    "class C : \n",
    "    def show(self): \n",
    "        print(\"This is C\")\n",
    "class D(C,B): \n",
    "    pass\n",
    "\n",
    "obj = D()\n",
    "obj.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "#operator Over loading\n",
    "class Vector : \n",
    "    def __init__(self,x,y):\n",
    "        self.real = x\n",
    "        self.image = y\n",
    "    def __str__(self):\n",
    "        return f\"Vector({self.real},{self.image})\"\n",
    "    def __repr__(self):\n",
    "        return f\"Vector({self.real},{self.image})\"\n",
    "    \n",
    "    def __add__(self,other):\n",
    "        real = self.real + other.real\n",
    "        image = self.image + other.image\n",
    "        return Vector(real,image)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "v1 = Vector(4,5)\n",
    "v2 = Vector(3,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vector(4,5)\n",
      "Vector(3,4)\n"
     ]
    }
   ],
   "source": [
    "print(v1)\n",
    "print(v2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vector(7,9)\n"
     ]
    }
   ],
   "source": [
    "v3 =  v1 + v2\n",
    "print(v3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vector(11,14)"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v3 + v1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
